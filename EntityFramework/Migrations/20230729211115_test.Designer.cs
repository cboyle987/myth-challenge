// <auto-generated />
using System;
using EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20230729211115_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityFramework.Models.DateAndTimeInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ActualEndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ActualEndTimeUtcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ActualStartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ActualStartTimeUtcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndDateLocalSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledEndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ScheduledEndTimeUtcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledStartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ScheduledStartTimeUtcSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StartDateLocalSpecified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DateAndTimeInfo");
                });

            modelBuilder.Entity("EntityFramework.Models.EventData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Attendance")
                        .HasColumnType("int");

                    b.Property<bool>("AttendanceSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("AwayParticipantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateAndTimeInfoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectParentSportsEventId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EndTimeSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("EventAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeDetail")
                        .HasColumnType("int");

                    b.Property<bool>("EventTypeDetailSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("FinishVenuId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeParticipantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NavigationInfoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParticipantType")
                        .HasColumnType("int");

                    b.Property<bool>("ParticipantTypeSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("PhaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultStatus")
                        .HasColumnType("int");

                    b.Property<bool>("ResultStatusSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("ScheduleStatus")
                        .HasColumnType("int");

                    b.Property<bool>("ScheduleStatusSpecified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduledStartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ScheduledStartTimeUtcSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("SiblingOrder")
                        .HasColumnType("int");

                    b.Property<bool>("SiblingOrderSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("SportId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsDisciplineId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsGenderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StartDateLocalSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("StartVenuId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TranslationReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VenuId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherConditionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Xids")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateAndTimeInfoId");

                    b.HasIndex("MetaId");

                    b.HasIndex("NavigationInfoId");

                    b.HasIndex("WeatherConditionsId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EntityFramework.Models.EventState", b =>
                {
                    b.Property<string>("EventStateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventStateId");

                    b.HasIndex("EventDataId");

                    b.ToTable("EventState");
                });

            modelBuilder.Entity("EntityFramework.Models.Meta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UpdateId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UpdateIdSpecified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("EntityFramework.Models.NavigationInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasStandings")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKnockout")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NavigationInfo");
                });

            modelBuilder.Entity("EntityFramework.Models.ParentChildRelation", b =>
                {
                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("ParentRelations");
                });

            modelBuilder.Entity("EntityFramework.Models.RelatedSportsEvents", b =>
                {
                    b.Property<string>("RelatedEventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Depth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavigationInfoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDetail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RelatedEventId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("NavigationInfoId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("EntityFramework.Models.SportsOrganization", b =>
                {
                    b.Property<string>("SportsOrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventDataId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SportsOrganizationId", "EventDataId");

                    b.HasIndex("EventDataId");

                    b.ToTable("SportsOrganization");
                });

            modelBuilder.Entity("EntityFramework.Models.WeatherConditions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BaseballHomePlateWindDirection")
                        .HasColumnType("int");

                    b.Property<bool>("BaseballHomePlateWindDirectionSpecified")
                        .HasColumnType("bit");

                    b.Property<string>("TailWindSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TemperatureCelsius")
                        .HasColumnType("real");

                    b.Property<bool>("TemperatureCelsiusSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("TemperatureFahrenheit")
                        .HasColumnType("int");

                    b.Property<bool>("TemperatureFahrenheitSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("WeatherType")
                        .HasColumnType("int");

                    b.Property<bool>("WeatherTypeSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<bool>("WindDirectionSpecified")
                        .HasColumnType("bit");

                    b.Property<float>("WindSpeedKilometers")
                        .HasColumnType("real");

                    b.Property<bool>("WindSpeedKilometersSpecified")
                        .HasColumnType("bit");

                    b.Property<int>("WindSpeedMiles")
                        .HasColumnType("int");

                    b.Property<bool>("WindSpeedMilesSpecified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WeatherConditions");
                });

            modelBuilder.Entity("EntityFramework.Models.EventData", b =>
                {
                    b.HasOne("EntityFramework.Models.DateAndTimeInfo", "DateAndTimeInfo")
                        .WithMany()
                        .HasForeignKey("DateAndTimeInfoId");

                    b.HasOne("EntityFramework.Models.Meta", "Meta")
                        .WithMany()
                        .HasForeignKey("MetaId");

                    b.HasOne("EntityFramework.Models.NavigationInfo", "NavigationInfo")
                        .WithMany()
                        .HasForeignKey("NavigationInfoId");

                    b.HasOne("EntityFramework.Models.WeatherConditions", "WeatherConditions")
                        .WithMany()
                        .HasForeignKey("WeatherConditionsId");

                    b.Navigation("DateAndTimeInfo");

                    b.Navigation("Meta");

                    b.Navigation("NavigationInfo");

                    b.Navigation("WeatherConditions");
                });

            modelBuilder.Entity("EntityFramework.Models.EventState", b =>
                {
                    b.HasOne("EntityFramework.Models.EventData", "MyProperty")
                        .WithMany("State")
                        .HasForeignKey("EventDataId");

                    b.Navigation("MyProperty");
                });

            modelBuilder.Entity("EntityFramework.Models.ParentChildRelation", b =>
                {
                    b.HasOne("EntityFramework.Models.EventData", "Child")
                        .WithMany("ParentSportEvents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.EventData", "Parent")
                        .WithMany("ChildSportEvents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EntityFramework.Models.RelatedSportsEvents", b =>
                {
                    b.HasOne("EntityFramework.Models.EventData", "Event")
                        .WithMany("RelatedSportsEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.NavigationInfo", "NavigationInfo")
                        .WithMany()
                        .HasForeignKey("NavigationInfoId");

                    b.HasOne("EntityFramework.Models.EventData", "RelatedEvent")
                        .WithMany()
                        .HasForeignKey("RelatedEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("NavigationInfo");

                    b.Navigation("RelatedEvent");
                });

            modelBuilder.Entity("EntityFramework.Models.SportsOrganization", b =>
                {
                    b.HasOne("EntityFramework.Models.EventData", null)
                        .WithMany("SportsOrganizations")
                        .HasForeignKey("EventDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityFramework.Models.EventData", b =>
                {
                    b.Navigation("ChildSportEvents");

                    b.Navigation("ParentSportEvents");

                    b.Navigation("RelatedSportsEvents");

                    b.Navigation("SportsOrganizations");

                    b.Navigation("State");
                });
#pragma warning restore 612, 618
        }
    }
}
